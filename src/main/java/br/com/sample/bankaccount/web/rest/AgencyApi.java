/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.5).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package br.com.sample.bankaccount.web.rest;

import br.com.sample.bankaccount.domain.Agency;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-06-11T01:35:03.801Z")

@Api(value = "agency", description = "the agency API")
public interface AgencyApi {

    @ApiOperation(value = "Add a new agency", nickname = "addAgency", notes = "", tags = {"agency",})
    @ApiResponses(value = {
            @ApiResponse(code = 201, message = "Created", response = Agency.class),
            @ApiResponse(code = 405, message = "Invalid input")})
    @RequestMapping(value = "/agency",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<Agency> addAgency(@ApiParam(value = "User object that needs to be added", required = true) @Valid @RequestBody Agency body);


    @ApiOperation(value = "Deletes an agency", nickname = "deleteAgency", notes = "", tags = {"agency",})
    @ApiResponses(value = {
            @ApiResponse(code = 400, message = "Invalid ID supplied"),
            @ApiResponse(code = 404, message = "Agency not found")})
    @RequestMapping(value = "/agency/{agencyId}",
            produces = {"application/json"},
            method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteAgency(@ApiParam(value = "Agency id to delete", required = true) @PathVariable("agencyId") Long agencyId);


    @ApiOperation(value = "Find agency by ID", nickname = "getAgencyById", notes = "Returns a single agency", response = Agency.class, tags = {"agency",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response = Agency.class),
            @ApiResponse(code = 400, message = "Invalid ID supplied"),
            @ApiResponse(code = 404, message = "Agency not found")})
    @RequestMapping(value = "/agency/{agencyId}",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<Agency> getAgencyById(@ApiParam(value = "ID of agency to return", required = true) @PathVariable("agencyId") Long agencyId);


    @ApiOperation(value = "Find all agencies", nickname = "getAllAgencies", notes = "", response = Agency.class, responseContainer = "List", tags = {"agency",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Success operation", response = Agency.class, responseContainer = "List")})
    @RequestMapping(value = "/agency",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<List<Agency>> getAllAgencies();


    @ApiOperation(value = "Update an existing agency", nickname = "updateAgency", notes = "", tags = {"agency",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Success operation", response = Agency.class),
            @ApiResponse(code = 400, message = "Invalid ID supplied"),
            @ApiResponse(code = 404, message = "Agency not found"),
            @ApiResponse(code = 405, message = "Validation exception")})
    @RequestMapping(value = "/agency/{agencyId}",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.PUT)
    ResponseEntity<Agency> updateAgency(@ApiParam(value = "ID of agency that needs to be updated", required = true) @PathVariable("agencyId") Long agencyId,
                                        @ApiParam(value = "", required = true) @Valid @RequestBody Agency body);

}
